{"version":3,"sources":["../../test/span.js"],"names":["constants","opentracing","describe","reporter","InMemoryReporter","tracer","span","spanContext","beforeEach","Tracer","ConstSampler","logger","MockLogger","SpanContext","withBinaryIds","Utils","encodeInt64","SAMPLED_MASK","Span","now","it","assert","equal","context","setOperationName","operationName","initialDate","Date","getTime","_startTime","expectedDuration","finishDate","finish","_duration","spans","length","spanInfo","toString","_logger","_errorMsgs","ret","log","event","_setSamplingPriority","isOk","isDebug","isSampled","isNotOk","keyValuePairs","numberTag","stringTag","booleanTag","addTags","count","i","_tags","key","timestamp","_logs","fields","value","payload","a","JSON","stringify","expectedTimestamp","clock","sinon","useFakeTimers","restore","spy","_baggageSetter","setBaggageItem","getBaggageItem","calledOnce","calledWith","child","startSpan","childOf","unnormalizedKey","_normalizeBaggageKey","_getBaggageHeaderCache","_debugThrottler","DefaultThrottler","prevTagLength","setTag","Tags","SAMPLING_PRIORITY","samplingFinalized","tags","isAllowedSpy","deepEqual","options","desc","sampling","reportedSpans","_","each","o","tagKeyTwo","logkeyOne","_sampler","childSpan","unsampledSpan","headers","inject","FORMAT_HTTP_HEADERS","unFinalizedSpan","_isWriteable","sampledSpan","JaegerTestUtils","hasTags","ProbabilisticSampler","newSpan","isEqual"],"mappings":"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","file":"span.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport ProbabilisticSampler from '../src/samplers/probabilistic_sampler';\nimport * as constants from '../src/constants.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport JaegerTestUtils from '../src/test_util';\nimport MockLogger from './lib/mock_logger';\nimport * as opentracing from 'opentracing';\nimport Span from '../src/span.js';\nimport SpanContext from '../src/span_context.js';\nimport sinon from 'sinon';\nimport Tracer from '../src/tracer.js';\nimport Utils from '../src/util.js';\nimport DefaultThrottler from '../src/throttler/default_throttler';\n\ndescribe('span should', () => {\n  let reporter = new InMemoryReporter();\n  let tracer, span, spanContext;\n\n  beforeEach(() => {\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true), { logger: new MockLogger() });\n\n    spanContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK\n    );\n\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n  });\n\n  it('return span context when context() is called', () => {\n    assert.equal(span.context(), spanContext);\n  });\n\n  it('return tracer when tracer() is called', () => {\n    assert.equal(span.tracer(), tracer);\n  });\n\n  it('set operation name correctly', () => {\n    span.setOperationName('operation-name');\n    assert.equal(span.operationName, 'operation-name');\n  });\n\n  it('finish span with custom duration', () => {\n    let initialDate = new Date(2011, 9, 1).getTime();\n    span._startTime = initialDate;\n    let expectedDuration = 1000;\n    let finishDate = initialDate + expectedDuration;\n\n    span.finish(finishDate);\n\n    assert.equal(span._duration, expectedDuration);\n    assert.equal(reporter.spans.length, 1);\n    assert.equal(reporter.spans[0], span);\n  });\n\n  it('finish span twice logs error', () => {\n    span.finish();\n    span.finish();\n    let spanInfo = `operation=${span.operationName},context=${span.context().toString()}`;\n    assert.equal(tracer._logger._errorMsgs[0], `${spanInfo}#You can only call finish() on a span once.`);\n  });\n\n  it('return this when calling log method', () => {\n    const ret = span.log({ event: 'event' });\n    assert.equal(ret, span);\n  });\n\n  it('set debug and sampling version through sampling priority', () => {\n    span._setSamplingPriority(3);\n\n    assert.isOk(span.context().isDebug());\n    assert.isOk(span.context().isSampled());\n  });\n\n  it('unset sampling on span', () => {\n    span._setSamplingPriority(0);\n\n    assert.isNotOk(span.context().isSampled());\n  });\n\n  it('add tags', () => {\n    let keyValuePairs = {\n      numberTag: 7,\n      stringTag: 'string',\n      booleanTag: true,\n    };\n    span.addTags(keyValuePairs);\n    span.addTags({ numberTag: 8 });\n\n    // test to make sure consecutive calls with same key does not\n    // overwrite the first key.\n    let count = 0;\n    for (let i = 0; i < span._tags.length; i++) {\n      if (span._tags[i].key === 'numberTag') {\n        count += 1;\n      }\n    }\n\n    assert.isOk(span._tags.length, 4);\n    assert.equal(count, 2);\n  });\n\n  it('add logs with timestamp, and event', () => {\n    let timestamp = new Date(2016, 8, 12).getTime();\n    let event = 'some messgae';\n    span.log({ event: event }, timestamp);\n\n    assert.equal(span._logs.length, 1);\n    assert.equal(span._logs[0].timestamp, timestamp);\n    assert.equal(span._logs[0].fields[0].value, event);\n  });\n\n  it('add logs with payload', () => {\n    let payload = { a: 1 };\n    span.log({ payload });\n\n    assert.equal(span._logs.length, 1);\n    assert.equal(JSON.stringify(span._logs[0].fields[0].value), JSON.stringify(payload));\n  });\n\n  it('add logs with event, but without timestamp', () => {\n    let expectedTimestamp = 123.456;\n    // mock global clock\n    let clock = sinon.useFakeTimers(expectedTimestamp);\n    let event = 'some messgae';\n    span.log({ event });\n\n    assert.equal(span._logs.length, 1);\n    assert.equal(span._logs[0].timestamp, expectedTimestamp);\n    assert.equal(span._logs[0].fields[0].value, event);\n    clock.restore();\n  });\n\n  it('set and retrieve baggage correctly', () => {\n    let key = 'some-key';\n    let value = 'some-value';\n\n    let spy = sinon.spy(span._baggageSetter, 'setBaggage');\n    span.setBaggageItem(key, value);\n    assert.equal(value, span.getBaggageItem(key));\n    assert(spy.calledOnce);\n    assert(spy.calledWith(span, key, value));\n  });\n\n  it('inherit baggage from parent', () => {\n    let key = 'some-key';\n    let value = 'some-value';\n\n    span.setBaggageItem(key, value);\n    let child = tracer.startSpan('child', { childOf: span.context() });\n    assert.equal(value, child.getBaggageItem(key));\n  });\n\n  it('normalized key correctly', () => {\n    let unnormalizedKey = 'SOME_KEY';\n    let key = span._normalizeBaggageKey(unnormalizedKey);\n\n    assert.equal(key, 'some-key');\n    assert.isOk(unnormalizedKey in Span._getBaggageHeaderCache());\n  });\n\n  it('not be set to debug via setTag if throttled', () => {\n    tracer._debugThrottler = new DefaultThrottler(true);\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n\n    const prevTagLength = span._tags.length;\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    assert.isOk(span.context().samplingFinalized);\n    assert.isNotOk(span.context().isDebug());\n    assert.equal(\n      prevTagLength,\n      span._tags.length,\n      'The sampling.priority tag should not be set if throttled'\n    );\n  });\n\n  it('not be set to debug via addTags if throttled', () => {\n    tracer._debugThrottler = new DefaultThrottler(true);\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n\n    const prevTagLength = span._tags.length;\n    const tags = {};\n    tags[opentracing.Tags.SAMPLING_PRIORITY] = 1;\n    span.addTags(tags);\n    assert.isOk(span.context().samplingFinalized);\n    assert.isNotOk(span.context().isDebug());\n    assert.equal(\n      prevTagLength,\n      span._tags.length,\n      'The sampling.priority tag should not be set if throttled'\n    );\n  });\n\n  it('ignore sampling.priority tag if span is already debug', () => {\n    tracer._debugThrottler = new DefaultThrottler();\n    const isAllowedSpy = sinon.spy(tracer._debugThrottler, 'isAllowed');\n    span = new Span(tracer, 'op-name', spanContext, tracer.now());\n\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    assert.isOk(span.context().samplingFinalized);\n    assert.isOk(span.context().isDebug());\n    assert.deepEqual(span._tags[span._tags.length - 1], { key: 'sampling.priority', value: 1 });\n\n    const prevTagLength = span._tags.length;\n    span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n    // isAllowed should only be called the first time the sampling.priority tag is set\n    sinon.assert.calledOnce(isAllowedSpy);\n    assert.equal(prevTagLength, span._tags.length, 'The sampling.priority tag should only be set once');\n  });\n\n  describe('adaptive sampling tests for span', () => {\n    let options = [\n      { desc: 'sampled: ', sampling: true, reportedSpans: 1 },\n      { desc: 'unsampled: ', sampling: false, reportedSpans: 0 },\n    ];\n    _.each(options, o => {\n      it(o.desc + 'should save tags, and logs on an unsampled span incase it later becomes sampled', () => {\n        let reporter = new InMemoryReporter();\n        let tracer = new Tracer('test-service-name', reporter, new ConstSampler(false), {\n          logger: new MockLogger(),\n        });\n        let span = tracer.startSpan('initially-unsampled-span');\n        span.setTag('tagKeyOne', 'tagValueOne');\n        span.addTags({\n          tagKeyTwo: 'tagValueTwo',\n        });\n        span.log({ logkeyOne: 'logValueOne' });\n\n        tracer._sampler = new ConstSampler(o.sampling);\n        span.setOperationName('sampled-span');\n        span.finish();\n\n        assert.deepEqual(span._tags[0], { key: 'tagKeyOne', value: 'tagValueOne' });\n        assert.deepEqual(span._tags[1], { key: 'tagKeyTwo', value: 'tagValueTwo' });\n        assert.deepEqual(span._logs[0].fields[0], { key: 'logkeyOne', value: 'logValueOne' });\n        assert.equal(reporter.spans.length, o.reportedSpans);\n      });\n    });\n\n    describe('span sampling finalizer', () => {\n      it('should trigger when it inherits a sampling decision', () => {\n        assert.equal(span.context().samplingFinalized, false, 'Span created in before each is not finalized');\n\n        let childSpan = tracer.startSpan('child-span', { childOf: span });\n        assert.isOk(span.context().samplingFinalized);\n        assert.isOk(childSpan.context().samplingFinalized);\n      });\n\n      it('should trigger when it sets the sampling priority', () => {\n        // Span created in before each is not finalized.\n        assert.equal(span.context().samplingFinalized, false);\n\n        span.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n        assert.isOk(span.context().samplingFinalized);\n        assert.deepEqual(span._tags[span._tags.length - 1], { key: 'sampling.priority', value: 1 });\n\n        const unsampledSpan = tracer.startSpan('unsampled-span');\n        const prevTagLength = span._tags.length;\n        unsampledSpan.setTag(opentracing.Tags.SAMPLING_PRIORITY, -1);\n        assert.isOk(unsampledSpan.context().samplingFinalized);\n        assert.equal(\n          prevTagLength,\n          span._tags.length,\n          'The sampling.priority tag should not be set if span is finalized and not sampled'\n        );\n      });\n\n      it('should trigger on a finish()-ed span', () => {\n        // Span created in before each is not finalized.\n        assert.equal(span.context().samplingFinalized, false);\n\n        span.finish();\n        assert.isOk(span.context().samplingFinalized);\n      });\n\n      it('should trigger after calling setOperationName', () => {\n        // Span created in before each is not finalized.\n        assert.equal(span.context().samplingFinalized, false);\n\n        span.setOperationName('fry');\n        assert.isOk(span.context().samplingFinalized);\n      });\n\n      it('should trigger when its context is injected into headers', () => {\n        // Span created in before each is not finalized.\n        assert.equal(span.context().samplingFinalized, false);\n\n        let headers = {};\n        tracer.inject(span.context(), opentracing.FORMAT_HTTP_HEADERS, headers);\n\n        assert.isOk(span.context().samplingFinalized);\n      });\n    });\n\n    it('isWriteable returns true if not finalized, or the span is sampled', () => {\n      tracer = new Tracer('test-service-name', new InMemoryReporter(), new ConstSampler(false), {\n        logger: new MockLogger(),\n      });\n      let unFinalizedSpan = tracer.startSpan('unFinalizedSpan');\n      assert.equal(unFinalizedSpan.context().samplingFinalized, false);\n      assert.isOk(unFinalizedSpan._isWriteable());\n\n      tracer._sampler = new ConstSampler(true);\n      let sampledSpan = tracer.startSpan('sampled-span');\n\n      sampledSpan.finish(); // finalizes the span\n      assert.isOk(sampledSpan.context().samplingFinalized);\n\n      assert.isOk(sampledSpan._isWriteable());\n    });\n\n    it('2nd setOperationName should add sampler tags to span, and change operationName', () => {\n      let span = tracer.startSpan('fry');\n\n      assert.equal(span.operationName, 'fry');\n      assert.isOk(\n        JaegerTestUtils.hasTags(span, {\n          'sampler.type': 'const',\n          'sampler.param': true,\n        })\n      );\n      tracer._sampler = new ProbabilisticSampler(1.0);\n      span.setOperationName('re-sampled-span');\n\n      assert.equal(span.operationName, 're-sampled-span');\n      assert.isOk(\n        JaegerTestUtils.hasTags(span, {\n          'sampler.type': 'probabilistic',\n          'sampler.param': 1,\n        })\n      );\n    });\n\n    it('2nd setOperationName should not change the sampling tags, but should change the operationName', () => {\n      let span = tracer.startSpan('fry');\n\n      span.setOperationName('new-span-one');\n      assert.equal(span.operationName, 'new-span-one');\n\n      // update sampler to something will always sample\n      tracer._sampler = new ProbabilisticSampler(1.0);\n\n      // The second cal lshould rename the operation name, but\n      // not re-sample the span.  This is because finalize was set\n      // in the first 'setOperationName' call.\n      span.setOperationName('new-span-two');\n\n      assert.equal(span.operationName, 'new-span-two');\n      assert.isOk(\n        JaegerTestUtils.hasTags(span, {\n          'sampler.type': 'const',\n          'sampler.param': true,\n        })\n      );\n    });\n  });\n\n  describe('setTag', () => {\n    it('should set a tag, and return a span', () => {\n      let newSpan = span.setTag('key', 'value');\n      assert.isOk(newSpan instanceof Span);\n      assert.isOk(_.isEqual(span._tags[0], { key: 'key', value: 'value' }));\n    });\n  });\n\n  // TODO(oibe) need tests for standard tags, and handlers\n});\n"]}